(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function ItemViewModel() {
  var itemName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'New Item';
  var thisItem = this;
  thisItem.itemName = ko.observable(itemName);
}

function ExtensionViewModel() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var self = this;
  self.list = ko.observableArray([]);
  self.newItem = ko.observable('');

  self.addItem = function () {
    if (self.newItem() !== '') {
      self.list.push(new ItemViewModel(self.newItem()));
      self.newItem('');
    }
  };

  self.TextInputKeyPress = function (data, event) {
    event.keyCode === 13 && self.addItem();
    return true;
  };
}

function applySecureBindings() {
  var options = {
    attribute: 'data-bind',
    globals: window,
    bindings: ko.bindingHandlers,
    noVirtualElements: false
  };
  chrome.storage.sync.get({
    storedData: {}
  }, function (data) {
    ko.bindingProvider.instance = new ko.secureBindingsProvider(options);
    ko.applyBindings(new ExtensionViewModel(data));
  });
}

document.addEventListener('DOMContentLoaded', applySecureBindings);

},{}]},{},[1]);
