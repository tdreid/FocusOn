(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function ItemViewModel() {
  var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var thisItem = this;
  thisItem.itemName = ko.observable(item.itemName || 'New Item').extend({
    preventBlank: '<<Enter a description.>>'
  });
  thisItem.editMode = ko.observable(false);
  thisItem.createdAt = ko.observable(item.createdAt || Date.now());
  thisItem.active = ko.observable(item.active || true);
  thisItem.statusStyle = ko.computed(function () {
    return thisItem.active() ? '' : 'text-muted text-inactive';
  });
  thisItem.dismissed = ko.observable(item.dismissed || false);

  thisItem.toggleEditMode = function () {
    return thisItem.editMode(!thisItem.editMode());
  };

  thisItem.ItemKeyPress = function (data, event) {
    (event.keyCode === 13 || event.keyCode === 27) && thisItem.toggleEditMode();
    console.log('ok');
    return true;
  };
}

function ExtensionViewModel() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var self = this;
  self.list = ko.observableArray(data);
  self.newItem = ko.observable('');
  self.showItems = ko.observable(5);
  self.sortedList = ko.computed(function () {
    return ko.utils.arrayFilter(self.list(), function (item) {
      return !item.dismissed();
    }).sort(function (a, b) {
      return a.createdAt() - b.createdAt();
    }).slice(0, self.showItems());
  });
  self.liveItems = ko.computed(function () {
    return ko.utils.arrayFilter(self.list(), function (i) {
      return !i.dismissed();
    });
  });

  self.addItem = function () {
    if (self.newItem() !== '') {
      self.list.push(new ItemViewModel({
        itemName: self.newItem()
      }));
      self.newItem('');
      self.save();
    }
  };

  self.save = function () {
    return chrome.storage.sync.set({
      list: self.list().map(function (item) {
        return ko.mapping.toJS(item);
      })
    }, function () {
      return console.log("Saved ".concat(self.list().length, " items."));
    });
  };

  self.clear = function () {
    return chrome.storage.sync.clear(function () {
      return self.list([]);
    });
  };

  self.removeItem = function (item) {
    self.list.remove(item);
    self.save();
  };

  self.TextInputKeyPress = function (data, event) {
    event.keyCode === 13 && self.addItem();
    return true;
  };

  self.workItem = function (item) {
    item.active(false);
    var newItem = new ItemViewModel(ko.mapping.toJS(item, {
      ignore: ['createdAt']
    }));
    self.list.push(newItem);
    self.save();
  };

  self.completeItem = function (item) {
    item.active(false);
    self.save();
  };

  self.dismissPage = function () {
    self.sortedList().forEach(function (item) {
      return item.dismissed(true);
    });
    self.save();
  };
}

function applySecureBindings() {
  var options = {
    attribute: 'data-bind',
    globals: window,
    bindings: ko.bindingHandlers,
    noVirtualElements: false
  };
  chrome.storage.sync.get({
    list: []
  }, function (data) {
    ko.bindingProvider.instance = new ko.secureBindingsProvider(options);
    ko.applyBindings(new ExtensionViewModel(data.list.map(function (item) {
      return new ItemViewModel(item);
    })));
  });
}

document.addEventListener('DOMContentLoaded', applySecureBindings);

},{}]},{},[1]);
